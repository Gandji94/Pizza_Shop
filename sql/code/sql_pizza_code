*/final table for the CTE/*
Select
	part.order_id,
	pizza_types.name as pizza,
	pizza_types.category as type,
	pizza_types.ingredients as ingredients,
	part.date as date,
	part.weekdays as weekdays,
	part.hour as hour,
	part.quantity as quantity,
	part.size as size,
	part.price as price
from (
	Select
		piz.order_id as order_id,
		piz.pizza_id as pizza_id,
		piz.date as date,
		piz.weekdays as weekdays,
		piz.hour as hour,
		piz.quantity as quantity,
		pizzas.size,
		cast(pizzas.price as float) as price,
		pizzas.pizza_type_id
	from (
		Select
			ord.order_id as order_id,
			ord.date as date,
			case
				when ord.weekday is 0 then 'sunday'
				when ord.weekday is 1 then 'monday'
				when ord.weekday is 2 then 'tuesday'
				when ord.weekday is 3 then 'wednesday'
				when ord.weekday is 4 then 'thursday'
				when ord.weekday is 5 then 'friday'
				when ord.weekday is 6 then 'saturday'
				else null
			end as weekdays,
			ord.hour as hour,
			order_details.pizza_id as pizza_id,
			order_details.quantity as quantity
		from (
			select
				orders.order_id,
				orders.date,
				cast(strftime('%w', orders.date) as INT) as weekday,
				cast(strftime('%H', orders.time) as time) as hour
			from orders
		) as ord
		join order_details
			on ord.order_id=order_details.order_id
	) as piz
	join pizzas
		on piz.pizza_id=pizzas.pizza_id
) as part
join pizza_types
	on part.pizza_type_id=pizza_types.pizza_type_id



*/CTE/*
WITH first as (
	select
		orders.order_id,
		orders.date,
		cast(strftime('%w', orders.date) as INT) as weekday,
		cast(strftime('%H', orders.time) as INT) as hour
	from orders
),
second as (
	Select
			first.order_id as order_id,
			first.date as date,
			case
				when first.weekday is 0 then 'sunday'
				when first.weekday is 1 then 'monday'
				when first.weekday is 2 then 'tuesday'
				when first.weekday is 3 then 'wednesday'
				when first.weekday is 4 then 'thursday'
				when first.weekday is 5 then 'friday'
				when first.weekday is 6 then 'saturday'
				else null
			end as weekdays,
			first.hour as hour,
			order_details.pizza_id as pizza_id,
			order_details.quantity as quantity
	from first
	join order_details
			on first.order_id=order_details.order_id
),
third as (
	Select
		second.order_id as order_id,
		second.pizza_id as pizza_id,
		second.date as date,
		second.weekdays as weekdays,
		second.hour as hour,
		second.quantity as quantity,
		pizzas.size,
		pizzas.price,
		pizzas.pizza_type_id
	from second
	join pizzas
		on  second.pizza_id=pizzas.pizza_id
)

Select
	third.order_id,
	pizza_types.name as pizza,
	pizza_types.category as type,
	pizza_types.ingredients as ingredients,
	third.date,
	third.weekdays as weekdays,
	third.hour as hour,
	third.quantity as quantity,
	third.size as size,
	third.price as price
from third
join pizza_types
	on third.pizza_type_id=pizza_types.pizza_type_id;


The whole purpose of the CTE is to make the query easier to read for others/colleagues, and it makes it easier to maintain the code. When you are reading this, you might wonder, why did he do it then? Well, knowing how to set up a CTE is always handy. The output would be perfectly fine to create a decent tableau report. But there are also disadvantages. For example, the final output cannot be queried, so we have to adjust the final output.
How can we fix it or let it put me more diplomatically, what is an alternative?
We can create temporary tables. This approach will allow us to work better with the final output.


*/creating temporary tabel(s)/*
create TEMP TABLE pizza_orders
(
	order_id INT,
	pizza VARCHAR(250),
	type VARCHAR(100),
	ingredients VARCHAR(250),
	date date,
	weekdays VARCHAR(50),
	hour time,
	quantity INT,
	size VARCHAR (5),
	price MONEY
);
INSERT INTO pizza_orders
(
	order_id,
	pizza,
	type,
	ingredients,
	date,
	weekdays,
	hour,
	quantity,
	size,
	price
)
Select
	part.order_id,
	pizza_types.name as pizza,
	pizza_types.category as type,
	pizza_types.ingredients as ingredients,
	part.date as date,
	part.weekdays as weekdays,
	part.hour as hour,
	part.quantity as quantity,
	part.size as size,
	part.price as price
from (
	Select
		piz.order_id as order_id,
		piz.pizza_id as pizza_id,
		piz.date as date,
		piz.weekdays as weekdays,
		piz.hour as hour,
		piz.quantity as quantity,
		pizzas.size,
		cast(pizzas.price as float) as price,
		pizzas.pizza_type_id
	from (
		Select
			ord.order_id as order_id,
			ord.date as date,
			case
				when ord.weekday is 0 then 'sunday'
				when ord.weekday is 1 then 'monday'
				when ord.weekday is 2 then 'tuesday'
				when ord.weekday is 3 then 'wednesday'
				when ord.weekday is 4 then 'thursday'
				when ord.weekday is 5 then 'friday'
				when ord.weekday is 6 then 'saturday'
				else null
			end as weekdays,
			ord.hour as hour,
			order_details.pizza_id as pizza_id,
			order_details.quantity as quantity
		from (
			select
				orders.order_id,
				orders.date,
				cast(strftime('%w', orders.date) as INT) as weekday,
				cast(strftime('%H', orders.time) as time) as hour
			from orders
		) as ord
		join order_details
			on ord.order_id=order_details.order_id
	) as piz
	join pizzas
		on piz.pizza_id=pizzas.pizza_id
) as part
join pizza_types
	on part.pizza_type_id=pizza_types.pizza_type_id
	
select
	*
from pizza_orders

drop TABLE pizza_orders *=> just in case you want to drop it*



From here on, we will query from the temporary table pizza_orders



*/Which month had the most orders?/*
Select
	cast(strftime('%m', pizza_orders.date) as date) as month,
	count(distinct order_id) as number_of_orders
from pizza_orders
group by cast(strftime('%m', pizza_orders.date) as date)
order by count(distinct order_id) DESC;


*/Which month had the least orders?/*
Select
	cast(strftime('%m', pizza_orders.date) as date) as month,
	count(distinct order_id) as number_of_orders
from pizza_orders
group by cast(strftime('%m', pizza_orders.date) as date)
order by count(distinct order_id) ASC;


*/Which month had the most pizzas ordered (quantity)/*
Select
	cast(strftime('%m', pizza_orders.date) as date) as month,
	sum(quantity) as number_of_pizzas_ordered
from pizza_orders
group by cast(strftime('%m', pizza_orders.date) as date)
order by sum(quantity)  DESC;


*/Which month had the least pizzas ordered (quantity)/*
Select
	cast(strftime('%m', pizza_orders.date) as date) as month,
	sum(quantity) as number_of_pizzas_ordered
from pizza_orders
group by cast(strftime('%m', pizza_orders.date) as date)
order by sum(quantity)  ASC;


*/What was the best day regarding orders?/*
Select
	weekdays,
	count( distinct order_id) as number_of_orders
from pizza_orders
group by weekdays
order by count(distinct order_id) DESC;


*/What was the worst day regarding orders?/*
Select
	weekdays,
	count( distinct order_id) as number_of_orders
from pizza_orders
group by weekdays
order by count(distinct order_id) ASC;


*/What time during the day do people order the most pizzas?/*
Select
	hour,
	count(distinct order_id) as number_of_orders
from pizza_orders
group by hour
order by count(distinct order_id) DESC;


*/What time during the day do people order the least pizzas?/*
Select
	hour,
	count(distinct order_id) as number_of_orders
from pizza_orders
group by hour
order by count(distinct order_id) ASC;


*/How did the sales develop over the whole year?/*
select
	cast(strftime('%m', pizza_orders.date) as date) as month,
	round(sum(price),2) as monthly_revenue,
	lag(round(sum(price),2))over() as prev_month,
	round(((round(sum(price),2)/lag(round(sum(price),2))over()))-1, 2) as revenue_development
from pizza_orders
group by cast(strftime('%m', pizza_orders.date) as date)
ORDER by cast(strftime('%m', pizza_orders.date) as date)


*/How many times did a pizza got ordered over a year/*
select
	pizza,
	cast(strftime('%m', pizza_orders.date) as date) as month,
	count(order_id) as how_many_times_ordered,
	lag(count(order_id))over(PARTITION by pizza) as prev_month
from pizza_orders
group by 1,2
ORDER by pizza ASC;


*/Most ordered pizzas by month measured in quantity/*
Select
	pizza,
	month,
	max(how_many_times_ordered) as how_many_times_ordered
from(
select
	pizza,
	cast(strftime('%m', pizza_orders.date) as date) as month,
	sum(quantity) as how_many_times_ordered,
	row_number()over(PARTITION BY sum(quantity) order by cast(strftime('%m', pizza_orders.date) as date)) as rank
from pizza_orders
group by 1,2
)as piz
where rank=1
group by 2


*/Every pizza and size and how they developed over hours, days and month/*
select
	pizza,
	weekdays,
	cast(strftime('%m', pizza_orders.date) as INT) as month,
	hour,
	size,
	sum(quantity) as how_many_times_ordered
from pizza_orders
group by 1,2,3,4,5


*/Distribution of sizes for every pizza/*
Select
	pizza,
	size,
	count(order_id) as number_of_sizes
from pizza_orders
GROUP BY 1,2


*/creating temp table ingred/*
create temp table ingred
(
	order_id INT,
	first_ingredients varchar(100),
	second_ingredients varchar(100),
	third_ingredients varchar(100),
	fourth_ingredients varchar(100),
	fifth_ingredients varchar(100),
	sixth_ingredients varchar(100),
	seventh_ingredients varchar(100),
	eight_ingredients varchar(100)
)
INSERT INTO ingred
(
	order_id,
	first_ingredients,
	second_ingredients,
	third_ingredients,
	fourth_ingredients,
	fifth_ingredients,
	sixth_ingredients,
	seventh_ingredients,
	eight_ingredients
)

select
	order_id,
	first_ingredients,
	second_ingredients,
	third_ingredients,
	fourth_ingredients,
	fifth_ingredients,
	sixth_ingredients,
	substr(seventh_ingredients, 0, instr(seventh_ingredients, ',')) as seventh_ingredients,
	substr(seventh_ingredients, instr(seventh_ingredients, ',')+1) as eight_ingredients
from(
select
	order_id,
	first_ingredients,
	second_ingredients,
	third_ingredients,
	fourth_ingredients,
	fifth_ingredients,
	substr(sixth_ingredients, 0, instr(sixth_ingredients, ',')) as sixth_ingredients,
	substr(sixth_ingredients, instr(sixth_ingredients, ',')+1) as seventh_ingredients
from(
Select
	order_id,
	first_ingredients,
	second_ingredients,
	third_ingredients,
	fourth_ingredients,
	substr(fifth_ingredients, 0, instr(fifth_ingredients, ',')) as fifth_ingredients,
	substr(fifth_ingredients, instr(fifth_ingredients, ',')+1) as sixth_ingredients
from (
Select
	order_id,
	first_ingredients,
	second_ingredients,
	third_ingredients,
	substr(fourth_ingredients, 0, instr(fourth_ingredients, ',')) as fourth_ingredients,
	substr(fourth_ingredients, instr(fourth_ingredients, ',')+1) as fifth_ingredients
from(
Select
	order_id,
	first_ingredients,
	second_ingredients,
	substr(third_ingredients, 0, instr(third_ingredients, ',')) as third_ingredients,
	substr(third_ingredients, instr(third_ingredients, ',')+1) as fourth_ingredients
from (
select
	order_id,
	first_ingredients,
	substr(second_ingredients, 0, instr(second_ingredients, ',')) as second_ingredients,
	substr(second_ingredients, instr(second_ingredients, ',')+1) as third_ingredients
from(
select
	order_id,
	substr(ingredients, 0, instr(ingredients, ',')) as first_ingredients,
	substr(ingredients, instr(ingredients, ',')+1) as second_ingredients
from pizza_orders
)as ing
)as ing2
)as ung3
) as ing4
) as ing5
) as ing6


*/Most selected toppings broken down by month/*
select
	toppings,
	month,
	count(topping.order_id) as number_of_times_selected
from(
select
	order_id,
	first_ingredients as toppings
from ingred
where first_ingredients !=''
and first_ingredients!=' '
UNION
select
	order_id,
	second_ingredients
from ingred
where second_ingredients !=''
and second_ingredients!=' '
union
select
	order_id,
	third_ingredients
from ingred
where third_ingredients !=''
and third_ingredients!=' '
union
select
	order_id,
	fourth_ingredients
from ingred
where fourth_ingredients !=''
and fourth_ingredients!=' '
UNION
select
	order_id,
	fifth_ingredients
from ingred
where fifth_ingredients !=''
and fifth_ingredients!=' '
union
select
	order_id,
	sixth_ingredients
from ingred
where sixth_ingredients !=''
and sixth_ingredients!=' '
union
select
	order_id,
	seventh_ingredients
from ingred
where seventh_ingredients !=''
and seventh_ingredients!=' '
union
select
	order_id,
	eight_ingredients
from ingred
where eight_ingredients !=''
and eight_ingredients!=' '
)as topping
join pizza_orders
	on topping.order_id=pizza_orders.order_id
group by 1,2
order by month asc;

*/Devoplment of revenue by category/*
select
	type,
	cast(strftime('%m', pizza_orders.date) as INT),
	count(distinct order_id) ordered,
	round(sum(price),2) as revenue,
	lag(round(sum(price),2))over() as prev_month,
	round((round(sum(price),2)/lag(round(sum(price),2))over())-1,2) as revenue_development
from pizza_orders
group by 1,2

